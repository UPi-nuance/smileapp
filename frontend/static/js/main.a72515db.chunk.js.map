{"version":3,"sources":["generated/smileapp/src/main/proto/smileservice_grpc_web_pb.js","WebcamCapture.js","App.js","serviceWorker.js","index.js","generated/smileapp/src/main/proto/smileservice_pb.js"],"names":["grpc","web","require","proto","smileapp","SmileServiceClient","hostname","credentials","options","this","client_","GrpcWebClientBase","hostname_","SmileServicePromiseClient","methodDescriptor_SmileService_detectMood","MethodDescriptor","MethodType","UNARY","MoodRequest","MoodReply","request","serializeBinary","deserializeBinary","AbstractClientBase","MethodInfo","prototype","detectMood","metadata","callback","rpcCall","unaryCall","module","exports","WebcamCapture","props","webcamRef","React","createRef","onCapture","bind","state","capturedImages","currentEmotion","setInterval","imageSrc","current","getScreenshot","setState","prevState","push","imageBuffer","base64ToArrayBuffer","replace","client","streamRequest","setContenttype","setBody","on","response","getEmoji","className","audio","height","width","ref","screenshotFormat","map","base64Image","idx","key","alt","style","src","base64","binary_string","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","emotionHash","Object","keys","reduce","a","b","Component","App","role","aria-label","Boolean","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","jspb","goog","global","Function","exportSymbol","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","Rect","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","msg","obj","contenttype","getFieldWithDefault","body","getBody_asB64","$jspbMessageInstance","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","value","readString","readBytes","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","undefined","getContenttype","writeString","getBody_asU8","writeBytes","setProto3StringField","getBody","bytesAsB64","bytesAsU8","setProto3BytesField","mood","emoji","rect","getRect","setMood","setEmoji","readMessage","setRect","getMood","writeMessage","getWrapperField","setWrapperField","clearRect","hasRect","getField","x","y","readUint32","setX","setY","setWidth","setHeight","getX","writeUint32","getY","getWidth","getHeight","setProto3IntField","object","extend"],"mappings":"8FAUA,IAAMA,EAAO,GACbA,EAAKC,IAAMC,EAAQ,IAEnB,IAAMC,EAAQ,GACdA,EAAMC,SAAWF,EAAQ,GAUzBC,EAAMC,SAASC,mBACX,SAASC,EAAUC,EAAaC,GAC7BA,IAASA,EAAU,IACxBA,EAAO,OAAa,OAKpBC,KAAKC,QAAU,IAAIV,EAAKC,IAAIU,kBAAkBH,GAK9CC,KAAKG,UAAYN,GAanBH,EAAMC,SAASS,0BACX,SAASP,EAAUC,EAAaC,GAC7BA,IAASA,EAAU,IACxBA,EAAO,OAAa,OAKpBC,KAAKC,QAAU,IAAIV,EAAKC,IAAIU,kBAAkBH,GAK9CC,KAAKG,UAAYN,GAWnB,IAAMQ,EAA2C,IAAId,EAAKC,IAAIc,iBAC5D,oCACAf,EAAKC,IAAIe,WAAWC,MACpBd,EAAMC,SAASc,YACff,EAAMC,SAASe,WAKf,SAASC,GACP,OAAOA,EAAQC,oBAEjBlB,EAAMC,SAASe,UAAUG,mBAUgB,IAAItB,EAAKC,IAAIsB,mBAAmBC,WACzErB,EAAMC,SAASe,WAKf,SAASC,GACP,OAAOA,EAAQC,oBAEjBlB,EAAMC,SAASe,UAAUG,mBAc3BnB,EAAMC,SAASC,mBAAmBoB,UAAUC,WACxC,SAASN,EAASO,EAAUC,GAC9B,OAAOnB,KAAKC,QAAQmB,QAAQpB,KAAKG,UAC7B,oCACAQ,EACAO,GAAY,GACZb,EACAc,IAYNzB,EAAMC,SAASS,0BAA0BY,UAAUC,WAC/C,SAASN,EAASO,GACpB,OAAOlB,KAAKC,QAAQoB,UAAUrB,KAAKG,UAC/B,oCACAQ,EACAO,GAAY,GACZb,IAINiB,EAAOC,QAAU7B,EAAMC,U,kPC1CR6B,E,YAjGX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,UAAYC,IAAMC,YACvB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAEjB,EAAKC,MAAQ,CACTC,eAAgB,GAChBC,eAAgB,IAPN,E,iFAYdC,YAAYlC,KAAK6B,UAAW,Q,kCAsCnB,IAAD,OACFM,EAAWnC,KAAK0B,UAAUU,QAAQC,gBACxCrC,KAAKsC,UAAS,SAACC,GAAa,IAChBP,EAAmBO,EAAnBP,eAER,OADAA,EAAeQ,KAAKL,GACb,CAACH,eAAgBA,MAG5B,IAAMS,EAAcjB,EAAckB,oBAAoBP,EAASQ,QAAQ,0BAA2B,KAE5FC,EAAS,IAAIhD,qBAAmB,wBAAyB,KAAM,MAE/DiD,EAAgB,IAAIpC,cAC1BoC,EAAcC,eAAe,cAC7BD,EAAcE,QAAQN,GAEPG,EAAO3B,WAAW4B,EAAe,IACzCG,GAAG,QAAQ,SAACC,GACf,EAAKX,SAAS,CAACL,eAAgBgB,EAASC,kB,+BAKvC,IAAD,EACuClD,KAAK+B,MAAxCC,EADJ,EACIA,eAAgBC,EADpB,EACoBA,eACxB,OACI,yBAAKkB,UAAW,UACZ,kBAAC,IAAD,CACIC,OAAO,EACPC,OAAQ,IACRC,MAAO,IACPC,IAAKvD,KAAK0B,UACV8B,iBAAiB,eAGrB,yBAAKL,UAAW,gBAAiBlB,GACjC,6BACA,6BACKD,EAAeyB,KAAI,SAACC,EAAaC,GAAd,OAChB,8BAAM,yBAAKC,IAAKD,EAAKE,IAAI,KAAKC,MAAO,CAACR,MAAO,IAAKD,OAAQ,IAAKU,IAAKL,a,2CAzE7DM,GAIvB,IAHA,IAAIC,EAAgBC,OAAOC,KAAKH,GAC5BI,EAAMH,EAAcI,OACpBC,EAAQ,IAAIC,WAAWH,GAClBI,EAAI,EAAGA,EAAIJ,EAAKI,IACrBF,EAAME,GAAKP,EAAcQ,WAAWD,GAExC,OAAOF,I,sCAGYI,GAGnB,OAFcC,OAAOC,KAAKF,GAAaG,QAAO,SAACC,EAAGC,GAAJ,OAAUL,EAAYI,GAAKJ,EAAYK,GAAKD,EAAIC,MAG1F,IAAK,QACD,MAAO,eACX,IAAK,WACD,MAAO,eACX,IAAK,UACD,MAAO,eACX,IAAK,OACD,MAAO,eACX,IAAK,YACD,MAAO,eACX,IAAK,UACD,MAAO,eACX,IAAK,WACD,MAAO,eACX,QACI,MAAO,oB,GA9CKC,aCQbC,MAZf,WACE,OACE,yBAAK9B,UAAU,OACX,yBAAKA,UAAU,UACX,+CACA,gDAAqB,0BAAM+B,KAAK,MAAMC,aAAW,MAA5B,kBAEzB,kBAAC,EAAD,QCCYC,QACW,cAA7BlB,OAAOmB,SAASxF,UAEe,UAA7BqE,OAAOmB,SAASxF,UAEhBqE,OAAOmB,SAASxF,SAASyF,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEzHnB,IAAIC,EAAOxG,EAAQ,IACfyG,EAAOD,EACPE,EAASC,SAAS,cAATA,GAEbF,EAAKG,aAAa,2BAA4B,KAAMF,GACpDD,EAAKG,aAAa,6BAA8B,KAAMF,GACtDD,EAAKG,aAAa,sBAAuB,KAAMF,GAW/CzG,MAAMC,SAASc,YAAc,SAAS6F,GACpCL,EAAKM,QAAQC,WAAWxG,KAAMsG,EAAU,GAAI,EAAG,KAAM,OAEvDJ,EAAKO,SAAS/G,MAAMC,SAASc,YAAawF,EAAKM,SAC3CL,EAAKQ,QAAUC,WAKjBjH,MAAMC,SAASc,YAAYmG,YAAc,8BAY3ClH,MAAMC,SAASe,UAAY,SAAS4F,GAClCL,EAAKM,QAAQC,WAAWxG,KAAMsG,EAAU,GAAI,EAAG,KAAM,OAEvDJ,EAAKO,SAAS/G,MAAMC,SAASe,UAAWuF,EAAKM,SACzCL,EAAKQ,QAAUC,WAKjBjH,MAAMC,SAASe,UAAUkG,YAAc,4BAYzClH,MAAMC,SAASkH,KAAO,SAASP,GAC7BL,EAAKM,QAAQC,WAAWxG,KAAMsG,EAAU,GAAI,EAAG,KAAM,OAEvDJ,EAAKO,SAAS/G,MAAMC,SAASkH,KAAMZ,EAAKM,SACpCL,EAAKQ,QAAUC,WAKjBjH,MAAMC,SAASkH,KAAKD,YAAc,uBAKhCX,EAAKM,QAAQO,qBAWjBpH,MAAMC,SAASc,YAAYO,UAAU+F,SAAW,SAASC,GACvD,OAAOtH,MAAMC,SAASc,YAAYsG,SAASC,EAAqBhH,OAalEN,MAAMC,SAASc,YAAYsG,SAAW,SAASE,EAAiBC,GAC9D,IAAOC,EAAM,CACXC,YAAanB,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,IACtDI,KAAMJ,EAAIK,iBAMZ,OAHIN,IACFE,EAAIK,qBAAuBN,GAEtBC,IAUTzH,MAAMC,SAASc,YAAYI,kBAAoB,SAASyD,GACtD,IAAImD,EAAS,IAAIxB,EAAKyB,aAAapD,GAC/B4C,EAAM,IAAIxH,MAAMC,SAASc,YAC7B,OAAOf,MAAMC,SAASc,YAAYkH,4BAA4BT,EAAKO,IAWrE/H,MAAMC,SAASc,YAAYkH,4BAA8B,SAAST,EAAKO,GACrE,KAAOA,EAAOG,cACRH,EAAOI,cADc,CAKzB,OADYJ,EAAOK,kBAEnB,KAAK,EACH,IAAIC,EAA+BN,EAAOO,aAC1Cd,EAAIpE,eAAeiF,GACnB,MACF,KAAK,EACCA,EAAoCN,EAAOQ,YAC/Cf,EAAInE,QAAQgF,GACZ,MACF,QACEN,EAAOS,aAIX,OAAOhB,GAQTxH,MAAMC,SAASc,YAAYO,UAAUJ,gBAAkB,WACrD,IAAIuH,EAAS,IAAIlC,EAAKmC,aAEtB,OADA1I,MAAMC,SAASc,YAAY4H,wBAAwBrI,KAAMmI,GAClDA,EAAOG,mBAWhB5I,MAAMC,SAASc,YAAY4H,wBAA0B,SAASE,EAASJ,GACrE,IAAIK,OAAIC,GACRD,EAAID,EAAQG,kBACNrE,OAAS,GACb8D,EAAOQ,YACL,EACAH,IAGJA,EAAID,EAAQK,gBACNvE,OAAS,GACb8D,EAAOU,WACL,EACAL,IAUN9I,MAAMC,SAASc,YAAYO,UAAU0H,eAAiB,WACpD,OAA8BzC,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,KAK1EN,MAAMC,SAASc,YAAYO,UAAU8B,eAAiB,SAASiF,GAC7D9B,EAAKM,QAAQuC,qBAAqB9I,KAAM,EAAG+H,IAQ7CrI,MAAMC,SAASc,YAAYO,UAAU+H,QAAU,WAC7C,OAA8B9C,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,KAS1EN,MAAMC,SAASc,YAAYO,UAAUuG,cAAgB,WACnD,OAA8BtB,EAAKM,QAAQyC,WACvChJ,KAAK+I,YAWXrJ,MAAMC,SAASc,YAAYO,UAAU4H,aAAe,WAClD,OAAmC3C,EAAKM,QAAQ0C,UAC5CjJ,KAAK+I,YAKXrJ,MAAMC,SAASc,YAAYO,UAAU+B,QAAU,SAASgF,GACtD9B,EAAKM,QAAQ2C,oBAAoBlJ,KAAM,EAAG+H,IAOxC9B,EAAKM,QAAQO,qBAWjBpH,MAAMC,SAASe,UAAUM,UAAU+F,SAAW,SAASC,GACrD,OAAOtH,MAAMC,SAASe,UAAUqG,SAASC,EAAqBhH,OAahEN,MAAMC,SAASe,UAAUqG,SAAW,SAASE,EAAiBC,GAC5D,IAAIsB,EAAGrB,EAAM,CACXgC,KAAMlD,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,IAC/CkC,MAAOnD,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,IAChDmC,MAAOb,EAAItB,EAAIoC,YAAc5J,MAAMC,SAASkH,KAAKE,SAASE,EAAiBuB,IAM7E,OAHIvB,IACFE,EAAIK,qBAAuBN,GAEtBC,IAUTzH,MAAMC,SAASe,UAAUG,kBAAoB,SAASyD,GACpD,IAAImD,EAAS,IAAIxB,EAAKyB,aAAapD,GAC/B4C,EAAM,IAAIxH,MAAMC,SAASe,UAC7B,OAAOhB,MAAMC,SAASe,UAAUiH,4BAA4BT,EAAKO,IAWnE/H,MAAMC,SAASe,UAAUiH,4BAA8B,SAAST,EAAKO,GACnE,KAAOA,EAAOG,cACRH,EAAOI,cADc,CAKzB,OADYJ,EAAOK,kBAEnB,KAAK,EACH,IAAIC,EAA+BN,EAAOO,aAC1Cd,EAAIqC,QAAQxB,GACZ,MACF,KAAK,EACCA,EAA+BN,EAAOO,aAC1Cd,EAAIsC,SAASzB,GACb,MACF,KAAK,EACCA,EAAQ,IAAIrI,MAAMC,SAASkH,KAC/BY,EAAOgC,YAAY1B,EAAMrI,MAAMC,SAASkH,KAAKc,6BAC7CT,EAAIwC,QAAQ3B,GACZ,MACF,QACEN,EAAOS,aAIX,OAAOhB,GAQTxH,MAAMC,SAASe,UAAUM,UAAUJ,gBAAkB,WACnD,IAAIuH,EAAS,IAAIlC,EAAKmC,aAEtB,OADA1I,MAAMC,SAASe,UAAU2H,wBAAwBrI,KAAMmI,GAChDA,EAAOG,mBAWhB5I,MAAMC,SAASe,UAAU2H,wBAA0B,SAASE,EAASJ,GACnE,IAAIK,OAAIC,GACRD,EAAID,EAAQoB,WACNtF,OAAS,GACb8D,EAAOQ,YACL,EACAH,IAGJA,EAAID,EAAQrF,YACNmB,OAAS,GACb8D,EAAOQ,YACL,EACAH,GAIK,OADTA,EAAID,EAAQe,YAEVnB,EAAOyB,aACL,EACApB,EACA9I,MAAMC,SAASkH,KAAKwB,0BAU1B3I,MAAMC,SAASe,UAAUM,UAAU2I,QAAU,WAC3C,OAA8B1D,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,KAK1EN,MAAMC,SAASe,UAAUM,UAAUuI,QAAU,SAASxB,GACpD9B,EAAKM,QAAQuC,qBAAqB9I,KAAM,EAAG+H,IAQ7CrI,MAAMC,SAASe,UAAUM,UAAUkC,SAAW,WAC5C,OAA8B+C,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,KAK1EN,MAAMC,SAASe,UAAUM,UAAUwI,SAAW,SAASzB,GACrD9B,EAAKM,QAAQuC,qBAAqB9I,KAAM,EAAG+H,IAQ7CrI,MAAMC,SAASe,UAAUM,UAAUsI,QAAU,WAC3C,OACErD,EAAKM,QAAQsD,gBAAgB7J,KAAMN,MAAMC,SAASkH,KAAM,IAK5DnH,MAAMC,SAASe,UAAUM,UAAU0I,QAAU,SAAS3B,GACpD9B,EAAKM,QAAQuD,gBAAgB9J,KAAM,EAAG+H,IAOxCrI,MAAMC,SAASe,UAAUM,UAAU+I,UAAY,WAC7C/J,KAAK0J,aAAQjB,IAQf/I,MAAMC,SAASe,UAAUM,UAAUgJ,QAAU,WAC3C,OAAyC,MAAlC/D,EAAKM,QAAQ0D,SAASjK,KAAM,IAOjCiG,EAAKM,QAAQO,qBAWjBpH,MAAMC,SAASkH,KAAK7F,UAAU+F,SAAW,SAASC,GAChD,OAAOtH,MAAMC,SAASkH,KAAKE,SAASC,EAAqBhH,OAa3DN,MAAMC,SAASkH,KAAKE,SAAW,SAASE,EAAiBC,GACvD,IAAOC,EAAM,CACX+C,EAAGjE,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,GAC5CiD,EAAGlE,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,GAC5C5D,MAAO2C,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,GAChD7D,OAAQ4C,EAAKM,QAAQc,oBAAoBH,EAAK,EAAG,IAMnD,OAHID,IACFE,EAAIK,qBAAuBN,GAEtBC,IAUTzH,MAAMC,SAASkH,KAAKhG,kBAAoB,SAASyD,GAC/C,IAAImD,EAAS,IAAIxB,EAAKyB,aAAapD,GAC/B4C,EAAM,IAAIxH,MAAMC,SAASkH,KAC7B,OAAOnH,MAAMC,SAASkH,KAAKc,4BAA4BT,EAAKO,IAW9D/H,MAAMC,SAASkH,KAAKc,4BAA8B,SAAST,EAAKO,GAC9D,KAAOA,EAAOG,cACRH,EAAOI,cADc,CAKzB,OADYJ,EAAOK,kBAEnB,KAAK,EACH,IAAIC,EAA+BN,EAAO2C,aAC1ClD,EAAImD,KAAKtC,GACT,MACF,KAAK,EACCA,EAA+BN,EAAO2C,aAC1ClD,EAAIoD,KAAKvC,GACT,MACF,KAAK,EACCA,EAA+BN,EAAO2C,aAC1ClD,EAAIqD,SAASxC,GACb,MACF,KAAK,EACCA,EAA+BN,EAAO2C,aAC1ClD,EAAIsD,UAAUzC,GACd,MACF,QACEN,EAAOS,aAIX,OAAOhB,GAQTxH,MAAMC,SAASkH,KAAK7F,UAAUJ,gBAAkB,WAC9C,IAAIuH,EAAS,IAAIlC,EAAKmC,aAEtB,OADA1I,MAAMC,SAASkH,KAAKwB,wBAAwBrI,KAAMmI,GAC3CA,EAAOG,mBAWhB5I,MAAMC,SAASkH,KAAKwB,wBAA0B,SAASE,EAASJ,GAC9D,IAAIK,OAAIC,EAEE,KADVD,EAAID,EAAQkC,SAEVtC,EAAOuC,YACL,EACAlC,GAIM,KADVA,EAAID,EAAQoC,SAEVxC,EAAOuC,YACL,EACAlC,GAIM,KADVA,EAAID,EAAQqC,aAEVzC,EAAOuC,YACL,EACAlC,GAIM,KADVA,EAAID,EAAQsC,cAEV1C,EAAOuC,YACL,EACAlC,IAUN9I,MAAMC,SAASkH,KAAK7F,UAAUyJ,KAAO,WACnC,OAA8BxE,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,IAK1EN,MAAMC,SAASkH,KAAK7F,UAAUqJ,KAAO,SAAStC,GAC5C9B,EAAKM,QAAQuE,kBAAkB9K,KAAM,EAAG+H,IAQ1CrI,MAAMC,SAASkH,KAAK7F,UAAU2J,KAAO,WACnC,OAA8B1E,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,IAK1EN,MAAMC,SAASkH,KAAK7F,UAAUsJ,KAAO,SAASvC,GAC5C9B,EAAKM,QAAQuE,kBAAkB9K,KAAM,EAAG+H,IAQ1CrI,MAAMC,SAASkH,KAAK7F,UAAU4J,SAAW,WACvC,OAA8B3E,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,IAK1EN,MAAMC,SAASkH,KAAK7F,UAAUuJ,SAAW,SAASxC,GAChD9B,EAAKM,QAAQuE,kBAAkB9K,KAAM,EAAG+H,IAQ1CrI,MAAMC,SAASkH,KAAK7F,UAAU6J,UAAY,WACxC,OAA8B5E,EAAKM,QAAQc,oBAAoBrH,KAAM,EAAG,IAK1EN,MAAMC,SAASkH,KAAK7F,UAAUwJ,UAAY,SAASzC,GACjD9B,EAAKM,QAAQuE,kBAAkB9K,KAAM,EAAG+H,IAI1C7B,EAAK6E,OAAOC,OAAOzJ,EAAS7B,MAAMC,Y","file":"static/js/main.a72515db.chunk.js","sourcesContent":["/**\n * @fileoverview gRPC-Web generated client stub for smileapp\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = {};\nproto.smileapp = require('./smileservice_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.smileapp.SmileServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.smileapp.SmileServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.smileapp.MoodRequest,\n *   !proto.smileapp.MoodReply>}\n */\nconst methodDescriptor_SmileService_detectMood = new grpc.web.MethodDescriptor(\n  '/smileapp.SmileService/detectMood',\n  grpc.web.MethodType.UNARY,\n  proto.smileapp.MoodRequest,\n  proto.smileapp.MoodReply,\n  /**\n   * @param {!proto.smileapp.MoodRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.smileapp.MoodReply.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.smileapp.MoodRequest,\n *   !proto.smileapp.MoodReply>}\n */\nconst methodInfo_SmileService_detectMood = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.smileapp.MoodReply,\n  /**\n   * @param {!proto.smileapp.MoodRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.smileapp.MoodReply.deserializeBinary\n);\n\n\n/**\n * @param {!proto.smileapp.MoodRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.smileapp.MoodReply)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.smileapp.MoodReply>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.smileapp.SmileServiceClient.prototype.detectMood =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/smileapp.SmileService/detectMood',\n      request,\n      metadata || {},\n      methodDescriptor_SmileService_detectMood,\n      callback);\n};\n\n\n/**\n * @param {!proto.smileapp.MoodRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.smileapp.MoodReply>}\n *     A native promise that resolves to the response\n */\nproto.smileapp.SmileServicePromiseClient.prototype.detectMood =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/smileapp.SmileService/detectMood',\n      request,\n      metadata || {},\n      methodDescriptor_SmileService_detectMood);\n};\n\n\nmodule.exports = proto.smileapp;\n\n","import React, {Component} from 'react';\nimport Webcam from \"react-webcam\";\n// import axios from 'axios';\n\nimport { MoodRequest } from \"./generated/smileapp/src/main/proto/smileservice_pb\";\nimport { SmileServiceClient } from \"./generated/smileapp/src/main/proto/smileservice_grpc_web_pb\";\n\n\nclass WebcamCapture extends Component {\n    constructor(props){\n        super(props);\n        this.webcamRef = React.createRef();\n        this.onCapture = this.onCapture.bind(this);\n\n        this.state = {\n            capturedImages: [],\n            currentEmotion: '',\n        };\n    }\n\n    componentDidMount() {\n        setInterval(this.onCapture, 3100);\n    }\n\n\n    static base64ToArrayBuffer(base64) {\n        let binary_string = window.atob(base64);\n        let len = binary_string.length;\n        let bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return bytes;\n    }\n\n    static evaluateEmotion(emotionHash) {\n        let emotion = Object.keys(emotionHash).reduce((a, b) => emotionHash[a] > emotionHash[b] ? a : b);\n        // \"anger\":0.272,\"contempt\":0.0,\"disgust\":0.0,\"fear\":0.0,\"happiness\":0.0,\"neutral\":0.728,\"sadness\":0.0,\"surprise\":0.0\n        switch (emotion) {\n            case 'anger':\n                return '😠';\n            case 'contempt':\n                return '😫';\n            case 'disgust':\n                return '🤢';\n            case 'fear':\n                return '😨';\n            case 'happiness':\n                return '😊';\n            case 'sadness':\n                return '😔';\n            case 'surprise':\n                return '😲';\n            default: // neutral\n                return '😐';\n\n        }\n    }\n\n    onCapture() {\n        const imageSrc = this.webcamRef.current.getScreenshot();\n        this.setState((prevState)=>{\n            const { capturedImages } = prevState;\n            capturedImages.push(imageSrc);\n            return {capturedImages: capturedImages};\n        });\n\n        const imageBuffer = WebcamCapture.base64ToArrayBuffer(imageSrc.replace('data:image/jpeg;base64,', ''));\n\n        const client = new SmileServiceClient('http://localhost:8080', null, null);\n\n        const streamRequest = new MoodRequest();\n        streamRequest.setContenttype('image/jpeg');\n        streamRequest.setBody(imageBuffer);\n\n        const stream = client.detectMood(streamRequest, {});\n        stream.on('data', (response) => {\n            this.setState({currentEmotion: response.getEmoji()});\n        });\n\n    }\n\n    render(){\n        const { capturedImages, currentEmotion } = this.state;\n        return  (\n            <div className={\"webcam\"}>\n                <Webcam\n                    audio={false}\n                    height={400}\n                    width={500}\n                    ref={this.webcamRef}\n                    screenshotFormat=\"image/jpeg\"\n\n                />\n                <div className={'emotionEmoji'}>{currentEmotion}</div>\n                <br/>\n                <div>\n                    {capturedImages.map((base64Image, idx) =>\n                        <span><img key={idx} alt=\":)\" style={{width: 100, height: 80}} src={base64Image}/></span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WebcamCapture;","import React from 'react';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"header\">\n            <h1>Nuance workshop</h1>\n            <p>Stream your smile <span role=\"img\" aria-label=\":)\">😁</span></p>\n        </div>\n        <WebcamCapture />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable */\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.smileapp.MoodReply', null, global);\ngoog.exportSymbol('proto.smileapp.MoodRequest', null, global);\ngoog.exportSymbol('proto.smileapp.Rect', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.smileapp.MoodRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.smileapp.MoodRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.smileapp.MoodRequest.displayName = 'proto.smileapp.MoodRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.smileapp.MoodReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.smileapp.MoodReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.smileapp.MoodReply.displayName = 'proto.smileapp.MoodReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.smileapp.Rect = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.smileapp.Rect, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.smileapp.Rect.displayName = 'proto.smileapp.Rect';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.smileapp.MoodRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.smileapp.MoodRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.smileapp.MoodRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    contenttype: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    body: msg.getBody_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.smileapp.MoodRequest}\n */\nproto.smileapp.MoodRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.smileapp.MoodRequest;\n  return proto.smileapp.MoodRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.smileapp.MoodRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.smileapp.MoodRequest}\n */\nproto.smileapp.MoodRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setContenttype(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBody(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.smileapp.MoodRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.smileapp.MoodRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.smileapp.MoodRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getContenttype();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getBody_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string contentType = 1;\n * @return {string}\n */\nproto.smileapp.MoodRequest.prototype.getContenttype = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.smileapp.MoodRequest.prototype.setContenttype = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bytes body = 2;\n * @return {string}\n */\nproto.smileapp.MoodRequest.prototype.getBody = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes body = 2;\n * This is a type-conversion wrapper around `getBody()`\n * @return {string}\n */\nproto.smileapp.MoodRequest.prototype.getBody_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBody()));\n};\n\n\n/**\n * optional bytes body = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBody()`\n * @return {!Uint8Array}\n */\nproto.smileapp.MoodRequest.prototype.getBody_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBody()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.smileapp.MoodRequest.prototype.setBody = function(value) {\n  jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.smileapp.MoodReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.smileapp.MoodReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.smileapp.MoodReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    mood: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    emoji: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    rect: (f = msg.getRect()) && proto.smileapp.Rect.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.smileapp.MoodReply}\n */\nproto.smileapp.MoodReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.smileapp.MoodReply;\n  return proto.smileapp.MoodReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.smileapp.MoodReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.smileapp.MoodReply}\n */\nproto.smileapp.MoodReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMood(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEmoji(value);\n      break;\n    case 3:\n      var value = new proto.smileapp.Rect;\n      reader.readMessage(value,proto.smileapp.Rect.deserializeBinaryFromReader);\n      msg.setRect(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.smileapp.MoodReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.smileapp.MoodReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.smileapp.MoodReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMood();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getEmoji();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getRect();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.smileapp.Rect.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string mood = 1;\n * @return {string}\n */\nproto.smileapp.MoodReply.prototype.getMood = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.smileapp.MoodReply.prototype.setMood = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string emoji = 2;\n * @return {string}\n */\nproto.smileapp.MoodReply.prototype.getEmoji = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.smileapp.MoodReply.prototype.setEmoji = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional Rect rect = 3;\n * @return {?proto.smileapp.Rect}\n */\nproto.smileapp.MoodReply.prototype.getRect = function() {\n  return /** @type{?proto.smileapp.Rect} */ (\n    jspb.Message.getWrapperField(this, proto.smileapp.Rect, 3));\n};\n\n\n/** @param {?proto.smileapp.Rect|undefined} value */\nproto.smileapp.MoodReply.prototype.setRect = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n */\nproto.smileapp.MoodReply.prototype.clearRect = function() {\n  this.setRect(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.smileapp.MoodReply.prototype.hasRect = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.smileapp.Rect.prototype.toObject = function(opt_includeInstance) {\n  return proto.smileapp.Rect.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.smileapp.Rect} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.Rect.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    x: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    y: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    width: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    height: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.smileapp.Rect}\n */\nproto.smileapp.Rect.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.smileapp.Rect;\n  return proto.smileapp.Rect.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.smileapp.Rect} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.smileapp.Rect}\n */\nproto.smileapp.Rect.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setX(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setY(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setWidth(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setHeight(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.smileapp.Rect.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.smileapp.Rect.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.smileapp.Rect} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.Rect.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getX();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getY();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getWidth();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getHeight();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 x = 1;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getX = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setX = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 y = 2;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getY = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setY = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 width = 3;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getWidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setWidth = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 height = 4;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getHeight = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setHeight = function(value) {\n  jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\ngoog.object.extend(exports, proto.smileapp);\n"],"sourceRoot":""}