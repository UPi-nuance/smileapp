{"version":3,"sources":["generated/smileapp/src/main/proto/smileservice_grpc_web_pb.js","nuance_logo.jpg","WebcamCapture.js","App.js","serviceWorker.js","index.js","generated/smileapp/src/main/proto/smileservice_pb.js"],"names":["grpc","web","require","proto","smileapp","SmileServiceClient","hostname","credentials","options","this","client_","GrpcWebClientBase","hostname_","SmileServicePromiseClient","methodDescriptor_SmileService_detectMood","MethodDescriptor","MethodType","UNARY","MoodRequest","MoodReply","request","serializeBinary","deserializeBinary","AbstractClientBase","MethodInfo","prototype","detectMood","metadata","callback","rpcCall","unaryCall","module","exports","WebcamCapture","props","webcamRef","React","createRef","onCapture","bind","state","capturedImages","currentEmotion","emoji","x","y","setInterval","imageSrc","current","getScreenshot","imageBuffer","base64ToArrayBuffer","replace","client","streamRequest","setContenttype","setBody","on","response","rect","getRect","setState","prevState","push","length","slice","getEmoji","getX","getY","className","style","transform","visibility","audio","height","width","ref","screenshotFormat","map","base64Image","idx","key","alt","src","base64","binary_string","window","atob","len","bytes","Uint8Array","i","charCodeAt","Component","App","logo","role","aria-label","Boolean","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","jspb","goog","global","Function","exportSymbol","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","Rect","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","msg","obj","contenttype","getFieldWithDefault","body","getBody_asB64","$jspbMessageInstance","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","value","readString","readBytes","skipField","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","undefined","getContenttype","writeString","getBody_asU8","writeBytes","setProto3StringField","getBody","bytesAsB64","bytesAsU8","setProto3BytesField","mood","setMood","setEmoji","readMessage","setRect","getMood","writeMessage","getWrapperField","setWrapperField","clearRect","hasRect","getField","readUint32","setX","setY","setWidth","setHeight","writeUint32","getWidth","getHeight","setProto3IntField","object","extend"],"mappings":"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","file":"static/js/main.beff8cc0.chunk.js","sourcesContent":["/**\n * @fileoverview gRPC-Web generated client stub for smileapp\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = {};\nproto.smileapp = require('./smileservice_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.smileapp.SmileServiceClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.smileapp.SmileServicePromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.smileapp.MoodRequest,\n *   !proto.smileapp.MoodReply>}\n */\nconst methodDescriptor_SmileService_detectMood = new grpc.web.MethodDescriptor(\n  '/smileapp.SmileService/detectMood',\n  grpc.web.MethodType.UNARY,\n  proto.smileapp.MoodRequest,\n  proto.smileapp.MoodReply,\n  /**\n   * @param {!proto.smileapp.MoodRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.smileapp.MoodReply.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.smileapp.MoodRequest,\n *   !proto.smileapp.MoodReply>}\n */\nconst methodInfo_SmileService_detectMood = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.smileapp.MoodReply,\n  /**\n   * @param {!proto.smileapp.MoodRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.smileapp.MoodReply.deserializeBinary\n);\n\n\n/**\n * @param {!proto.smileapp.MoodRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.smileapp.MoodReply)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.smileapp.MoodReply>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.smileapp.SmileServiceClient.prototype.detectMood =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/smileapp.SmileService/detectMood',\n      request,\n      metadata || {},\n      methodDescriptor_SmileService_detectMood,\n      callback);\n};\n\n\n/**\n * @param {!proto.smileapp.MoodRequest} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.smileapp.MoodReply>}\n *     A native promise that resolves to the response\n */\nproto.smileapp.SmileServicePromiseClient.prototype.detectMood =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/smileapp.SmileService/detectMood',\n      request,\n      metadata || {},\n      methodDescriptor_SmileService_detectMood);\n};\n\n\nmodule.exports = proto.smileapp;\n\n","module.exports = __webpack_public_path__ + \"static/media/nuance_logo.d9db5260.jpg\";","import React, {Component} from 'react';\nimport Webcam from \"react-webcam\";\n\nimport { MoodRequest } from \"./generated/smileapp/src/main/proto/smileservice_pb\";\nimport { SmileServiceClient } from \"./generated/smileapp/src/main/proto/smileservice_grpc_web_pb\";\n\n\nclass WebcamCapture extends Component {\n    constructor(props){\n        super(props);\n        this.webcamRef = React.createRef();\n        this.onCapture = this.onCapture.bind(this);\n\n        this.state = {\n            capturedImages: [],\n            currentEmotion: {\n                emoji: '😐',\n                x: 0,\n                y: 0\n            },\n        };\n    }\n\n    componentDidMount() {\n        setInterval(this.onCapture, 3100);\n    }\n\n\n    static base64ToArrayBuffer(base64) {\n        let binary_string = window.atob(base64);\n        let len = binary_string.length;\n        let bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return bytes;\n    }\n\n    onCapture() {\n        const imageSrc = this.webcamRef.current.getScreenshot();\n\n        if (!imageSrc) return;\n\n        const imageBuffer = WebcamCapture.base64ToArrayBuffer(imageSrc.replace('data:image/jpeg;base64,', ''));\n\n        const client = new SmileServiceClient('http://localhost:8080', null, null);\n\n        const streamRequest = new MoodRequest();\n        streamRequest.setContenttype('image/jpeg');\n        streamRequest.setBody(imageBuffer);\n\n        const stream = client.detectMood(streamRequest, {});\n        stream.on('data', (response) => {\n            const rect = response.getRect();\n\n            this.setState((prevState)=>{\n                const { capturedImages } = prevState;\n                capturedImages.push(imageSrc);\n                return {\n                    capturedImages: capturedImages && capturedImages.length > 10 ? capturedImages.slice(1) : capturedImages,\n                    currentEmotion:\n                        {\n                            emoji: response.getEmoji(),\n                            x: rect.getX() || 0,\n                            y: rect.getY() || 0\n                        }\n                };\n            });\n\n        });\n\n    }\n\n    render(){\n        const { capturedImages, currentEmotion } = this.state;\n        return  (\n            <div className={\"webcam\"}>\n                <div className={\"webcamEmojiContainer\"}>\n                    <div className={'emotionEmoji'} style={{\n                        transform: `translate(${currentEmotion.y-190}px,${currentEmotion.x-100}px)`,\n                        visibility: `${ capturedImages.length >= 1 ? '' : 'hidden' }`\n                    }}>{currentEmotion.emoji}</div>\n                    <Webcam\n                        audio={false}\n                        height={400}\n                        width={500}\n                        ref={this.webcamRef}\n                        screenshotFormat=\"image/jpeg\"\n                    />\n                </div>\n                <div>\n                    {capturedImages.map((base64Image, idx) =>\n                        <span><img className=\"imgGallery\" key={idx} alt=\":)\" style={{width: 100, height: 80}} src={base64Image}/></span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WebcamCapture;","import React from 'react';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\nimport logo from \"./nuance_logo.jpg\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"header\">\n            <img className=\"logo\" src={logo} alt=\"logo\" />\n            <div><strong>Stream your smile... </strong><span role=\"img\" aria-label=\":)\">😁</span></div>\n        </div>\n        <WebcamCapture />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable */\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.smileapp.MoodReply', null, global);\ngoog.exportSymbol('proto.smileapp.MoodRequest', null, global);\ngoog.exportSymbol('proto.smileapp.Rect', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.smileapp.MoodRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.smileapp.MoodRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.smileapp.MoodRequest.displayName = 'proto.smileapp.MoodRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.smileapp.MoodReply = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.smileapp.MoodReply, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.smileapp.MoodReply.displayName = 'proto.smileapp.MoodReply';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.smileapp.Rect = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.smileapp.Rect, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.smileapp.Rect.displayName = 'proto.smileapp.Rect';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.smileapp.MoodRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.smileapp.MoodRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.smileapp.MoodRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    contenttype: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    body: msg.getBody_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.smileapp.MoodRequest}\n */\nproto.smileapp.MoodRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.smileapp.MoodRequest;\n  return proto.smileapp.MoodRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.smileapp.MoodRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.smileapp.MoodRequest}\n */\nproto.smileapp.MoodRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setContenttype(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setBody(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.smileapp.MoodRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.smileapp.MoodRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.smileapp.MoodRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getContenttype();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getBody_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string contentType = 1;\n * @return {string}\n */\nproto.smileapp.MoodRequest.prototype.getContenttype = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.smileapp.MoodRequest.prototype.setContenttype = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bytes body = 2;\n * @return {string}\n */\nproto.smileapp.MoodRequest.prototype.getBody = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes body = 2;\n * This is a type-conversion wrapper around `getBody()`\n * @return {string}\n */\nproto.smileapp.MoodRequest.prototype.getBody_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getBody()));\n};\n\n\n/**\n * optional bytes body = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getBody()`\n * @return {!Uint8Array}\n */\nproto.smileapp.MoodRequest.prototype.getBody_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getBody()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.smileapp.MoodRequest.prototype.setBody = function(value) {\n  jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.smileapp.MoodReply.prototype.toObject = function(opt_includeInstance) {\n  return proto.smileapp.MoodReply.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.smileapp.MoodReply} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodReply.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    mood: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    emoji: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    rect: (f = msg.getRect()) && proto.smileapp.Rect.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.smileapp.MoodReply}\n */\nproto.smileapp.MoodReply.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.smileapp.MoodReply;\n  return proto.smileapp.MoodReply.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.smileapp.MoodReply} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.smileapp.MoodReply}\n */\nproto.smileapp.MoodReply.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMood(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEmoji(value);\n      break;\n    case 3:\n      var value = new proto.smileapp.Rect;\n      reader.readMessage(value,proto.smileapp.Rect.deserializeBinaryFromReader);\n      msg.setRect(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.smileapp.MoodReply.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.smileapp.MoodReply.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.smileapp.MoodReply} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.MoodReply.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMood();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getEmoji();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getRect();\n  if (f != null) {\n    writer.writeMessage(\n      3,\n      f,\n      proto.smileapp.Rect.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional string mood = 1;\n * @return {string}\n */\nproto.smileapp.MoodReply.prototype.getMood = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/** @param {string} value */\nproto.smileapp.MoodReply.prototype.setMood = function(value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string emoji = 2;\n * @return {string}\n */\nproto.smileapp.MoodReply.prototype.getEmoji = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.smileapp.MoodReply.prototype.setEmoji = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional Rect rect = 3;\n * @return {?proto.smileapp.Rect}\n */\nproto.smileapp.MoodReply.prototype.getRect = function() {\n  return /** @type{?proto.smileapp.Rect} */ (\n    jspb.Message.getWrapperField(this, proto.smileapp.Rect, 3));\n};\n\n\n/** @param {?proto.smileapp.Rect|undefined} value */\nproto.smileapp.MoodReply.prototype.setRect = function(value) {\n  jspb.Message.setWrapperField(this, 3, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n */\nproto.smileapp.MoodReply.prototype.clearRect = function() {\n  this.setRect(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.smileapp.MoodReply.prototype.hasRect = function() {\n  return jspb.Message.getField(this, 3) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.smileapp.Rect.prototype.toObject = function(opt_includeInstance) {\n  return proto.smileapp.Rect.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.smileapp.Rect} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.Rect.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    x: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    y: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    width: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    height: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.smileapp.Rect}\n */\nproto.smileapp.Rect.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.smileapp.Rect;\n  return proto.smileapp.Rect.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.smileapp.Rect} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.smileapp.Rect}\n */\nproto.smileapp.Rect.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setX(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setY(value);\n      break;\n    case 3:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setWidth(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setHeight(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.smileapp.Rect.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.smileapp.Rect.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.smileapp.Rect} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.smileapp.Rect.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getX();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getY();\n  if (f !== 0) {\n    writer.writeUint32(\n      2,\n      f\n    );\n  }\n  f = message.getWidth();\n  if (f !== 0) {\n    writer.writeUint32(\n      3,\n      f\n    );\n  }\n  f = message.getHeight();\n  if (f !== 0) {\n    writer.writeUint32(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 x = 1;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getX = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setX = function(value) {\n  jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional uint32 y = 2;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getY = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setY = function(value) {\n  jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional uint32 width = 3;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getWidth = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setWidth = function(value) {\n  jspb.Message.setProto3IntField(this, 3, value);\n};\n\n\n/**\n * optional uint32 height = 4;\n * @return {number}\n */\nproto.smileapp.Rect.prototype.getHeight = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/** @param {number} value */\nproto.smileapp.Rect.prototype.setHeight = function(value) {\n  jspb.Message.setProto3IntField(this, 4, value);\n};\n\n\ngoog.object.extend(exports, proto.smileapp);\n"],"sourceRoot":""}